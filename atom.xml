<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风口之巅</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-21T09:59:31.838Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>hanny</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用operator-sdk笔记</title>
    <link href="http://example.com/2021/01/18/%E4%BD%BF%E7%94%A8operator-sdk%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/01/18/%E4%BD%BF%E7%94%A8operator-sdk%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-18T03:21:30.878Z</published>
    <updated>2021-01-21T09:59:31.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="brew安装operator-sdk"><a href="#brew安装operator-sdk" class="headerlink" title="brew安装operator-sdk"></a>brew安装operator-sdk</h2><ul><li>brew install operator-sdk</li></ul><p><img src="/2021/01/18/%E4%BD%BF%E7%94%A8operator-sdk%E7%AC%94%E8%AE%B0/brew%E5%AE%89%E8%A3%85operator-sdk.png" alt="brew安装operator-sdk"></p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ol><li><p>创建项目名</p><ol><li><pre><code class="sh">mkdir memcached-operatorcd memcached-operator<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 新建项目</span><br><span class="line">   </span><br><span class="line">   1. operator-sdk init --domain&#x3D;example.com --repo&#x3D;github.com&#x2F;example-inc&#x2F;memcached-operator</span><br><span class="line"></span><br><span class="line">![初始化项目](使用operator-sdk笔记&#x2F;初始化项目.png)</span><br><span class="line"></span><br><span class="line">  2. 目录结构</span><br><span class="line"></span><br><span class="line">     ![目录结构1](使用operator-sdk笔记&#x2F;目录结构1.png)</span><br><span class="line"></span><br><span class="line">     - config下获得启动配置</span><br><span class="line"></span><br><span class="line">       &#96;&#96;&#96;sh</span><br><span class="line">       .</span><br><span class="line">       ├── certmanager</span><br><span class="line">       ├── crd</span><br><span class="line">       ├── default</span><br><span class="line">       ├── manager</span><br><span class="line">       ├── prometheus</span><br><span class="line">       ├── rbac</span><br><span class="line">       ├── samples</span><br><span class="line">       ├── scorecard</span><br><span class="line">       └── webhook</span><br></pre></td></tr></table></figure> 1. Default 包含kustomize基础，在标准配置中启动控制器 2. manager控制集群pod启动</code></pre></li></ol><ul><li><p>main.go启动文件</p></li><li><p>PROJECT新组件的元数据</p></li></ul></li></ol><h2 id="创建扩展式API"><a href="#创建扩展式API" class="headerlink" title="创建扩展式API"></a>创建扩展式API</h2><ol><li><p>创建api</p><ol><li><pre><code class="sh">operator-sdk create api --group=cache --version v1 --kind Memcached --resource=true --controller=true<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![创建扩展api](使用operator-sdk笔记&#x2F;创建扩展api.png)</span><br><span class="line"></span><br><span class="line">## 编译推送operator镜像</span><br><span class="line"></span><br><span class="line">1. &#96;&#96;&#96;sh</span><br><span class="line">   make docker-build docker-push IMG&#x3D;&lt;some-registry&gt;&#x2F;&lt;project-name&gt;:&lt;tag&gt;</span><br><span class="line">   </span><br><span class="line">   ---上面是模版</span><br><span class="line">   </span><br><span class="line">   make docker-build docker-push IMG&#x3D;cainiaohui&#x2F;memcached-operator:v0.1</span><br></pre></td></tr></table></figure>## 运行operator</code></pre></li></ol></li><li><p>```sh<br>make install<br>make deploy IMG=<some-registry>/<project-name>:<tag></tag></project-name></some-registry></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.创建custom resource</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;sh</span><br><span class="line">kubectl apply -f config&#x2F;samples&#x2F;cache_v1_memcached.yaml</span><br></pre></td></tr></table></figure></li><li><p>日志查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs deployment.apps/memcached-operator-controller-manager -n memcached-operator-system -c manager</span><br></pre></td></tr></table></figure></li><li><p>清除CR</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f config/samples/cache_v1_memcached.yaml</span><br></pre></td></tr></table></figure><p>5.卸载operator和CRDs</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kustomize build config/default | kubectl delete -f -</span><br></pre></td></tr></table></figure><h1 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h1><h2 id="从main函数开始"><a href="#从main函数开始" class="headerlink" title="从main函数开始"></a>从main函数开始</h2><ol><li><p>通过newManager封装指mgr变量中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options&#123;</span><br><span class="line">   Scheme:             scheme,</span><br><span class="line">   MetricsBindAddress: metricsAddr,</span><br><span class="line">   Port:               <span class="number">9443</span>,</span><br><span class="line">   LeaderElection:     enableLeaderElection,</span><br><span class="line">   LeaderElectionID:   <span class="string">&quot;f1c5ece8.example.com&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>给自定义的controller分配client参数、log和scheme，并且建立manager</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err = (&amp;controllers.MemcachedReconciler&#123;</span><br><span class="line">   Client: mgr.GetClient(),</span><br><span class="line">   Log:    ctrl.Log.WithName(<span class="string">&quot;controllers&quot;</span>).WithName(<span class="string">&quot;Memcached&quot;</span>),</span><br><span class="line">   Scheme: mgr.GetScheme(),</span><br><span class="line">&#125;).SetupWithManager(mgr); err != <span class="literal">nil</span> &#123;</span><br><span class="line">   setupLog.Error(err, <span class="string">&quot;unable to create controller&quot;</span>, <span class="string">&quot;controller&quot;</span>, <span class="string">&quot;Memcached&quot;</span>)</span><br><span class="line">   os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="是否需要创建多个API和控制器"><a href="#是否需要创建多个API和控制器" class="headerlink" title="是否需要创建多个API和控制器"></a>是否需要创建多个API和控制器</h2></li></ol><ul><li><p>如果需要创建多个API组，需要开启 multigroup=true</p></li><li><p>开启方式两种</p><ul><li><p>修改PROJECT</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">domain: example.com</span><br><span class="line">layout: go.kubebuilder.io/v2</span><br><span class="line">multigroup: true//手动添加</span><br></pre></td></tr></table></figure></li><li><p>创建API时候定义</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">operator-sdk edit --multigroup=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="创建新的API和controller"><a href="#创建新的API和controller" class="headerlink" title="创建新的API和controller"></a>创建新的API和controller</h2></li></ul></li><li><pre><code class="console">operator-sdk create api --group=cache1 --version=v1alpha1 --kind=Memcached1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">期间会提示Resource 和 Controller</span><br><span class="line"></span><br><span class="line">![自定义创建多个api2](使用operator-sdk笔记&#x2F;自定义创建多个api2.png)</span><br><span class="line"></span><br><span class="line">- 开启multigroup后，原本的目录结构就改变了如下图。controller层下会多一个group文件夹、并且api也会变成apis，而且下面的目录由两层变成三层。</span><br><span class="line"></span><br><span class="line">  ![开启multigroup目录结构变化1](使用operator-sdk笔记&#x2F;开启multigroup目录结构变化1.png)</span><br><span class="line"></span><br><span class="line">## 定义API</span><br><span class="line"></span><br><span class="line">- 自定义CR资源的API需要填写在apis&#x2F;cache1&#x2F;v1alpha1&#x2F;memcached1_types.go</span><br><span class="line"></span><br><span class="line">  ![修改CR属性1](使用operator-sdk笔记&#x2F;修改CR属性1.png)</span><br><span class="line"></span><br><span class="line">- Memcached1的结构体封装上面spec和status组成一个API值</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;go</span><br><span class="line">  type Memcached1 struct &#123;</span><br><span class="line">     metav1.TypeMeta   &#96;json:&quot;,inline&quot;&#96;</span><br><span class="line">     metav1.ObjectMeta &#96;json:&quot;metadata,omitempty&quot;&#96;</span><br><span class="line">  </span><br><span class="line">     Spec   Memcached1Spec   &#96;json:&quot;spec,omitempty&quot;&#96;</span><br><span class="line">     Status Memcached1Status &#96;json:&quot;status,omitempty&quot;&#96;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>## 更新generated</code></pre></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make generate</span><br></pre></td></tr></table></figure><ul><li>makefile目标将调用<a href="https://sigs.k8s.io/controller-tools">controller-gen</a>实用程序来更新<code>api/v1alpha1/zz_generated.deepcopy.go</code>文件，以确保我们API的Go类型定义实现了<code>runtime.Object</code>所有Kind类型必须实现的接口</li></ul><h2 id="生成crd-config文件"><a href="#生成crd-config文件" class="headerlink" title="生成crd config文件"></a>生成crd config文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make manifests</span><br></pre></td></tr></table></figure><ul><li>makefile目标将调用controller-gen生成CRD清单，位于<code>config/crd/bases/cache.example.com_memcacheds.yaml</code></li><li>期间会将OpenAPIv3模式添加到<code>spec.validation</code>块中的CRD清单中。此验证块允许Kubernetes在创建或更新Memcached自定义资源时验证其属性。</li></ul><p><img src="/2021/01/18/%E4%BD%BF%E7%94%A8operator-sdk%E7%AC%94%E8%AE%B0/openAPIS%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81.png" alt="openAPIS添加验证"></p><h2 id="控制器监控资源代码"><a href="#控制器监控资源代码" class="headerlink" title="控制器监控资源代码"></a>控制器监控资源代码</h2><ol><li>Controllers/cache1/memcached1_controller.go的SetupWithManager函数构建operator。 Manager为方法库</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Memcached1Reconciler)</span> <span class="title">SetupWithManager</span><span class="params">(mgr ctrl.Manager)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> ctrl.NewControllerManagedBy(mgr).</span><br><span class="line">      For(&amp;cache1v1alpha1.Memcached1&#123;&#125;).</span><br><span class="line">      WithOptions(controller.Options&#123;       <span class="comment">//手动添加</span></span><br><span class="line">      MaxConcurrentReconciles: <span class="number">2</span>,          <span class="comment">//手动添加</span></span><br><span class="line">      Reconciler:              <span class="literal">nil</span>,     <span class="comment">//手动添加</span></span><br><span class="line">      RateLimiter:             <span class="literal">nil</span>,     <span class="comment">//手动添加</span></span><br><span class="line">      Log:                     <span class="literal">nil</span>,     <span class="comment">//手动添加</span></span><br><span class="line">   &#125;).</span><br><span class="line">      Complete(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动添加部分为设置控制器的最大并发数。</p><ol start="2"><li>每个Controller都有一个Reconciler对象，该对象具有<code>Reconcile()</code>实现协调循环的方法。向协调循环传递<a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg/reconcile#Request"><code>Request</code></a>参数，该参数是命名空间/名称键，用于从缓存中查找主要资源对象Memcached：(并且用来处理rbac)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +kubebuilder:rbac:groups=cache1.example.com,resources=memcached1s,verbs=get;list;watch;create;update;patch;delete</span></span><br><span class="line"><span class="comment">// +kubebuilder:rbac:groups=cache1.example.com,resources=memcached1s/status,verbs=get;update;patch</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Memcached1Reconciler)</span> <span class="title">Reconcile</span><span class="params">(req ctrl.Request)</span> <span class="params">(ctrl.Result, error)</span></span> &#123;</span><br><span class="line">   _ = context.Background()</span><br><span class="line">   _ = r.Log.WithValues(<span class="string">&quot;memcached1&quot;</span>, req.NamespacedName)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// your logic here</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> ctrl.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新crd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make manifests</span><br></pre></td></tr></table></figure><p>构建并且运行operator</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>构建image,推送images</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> USERNAME = &lt;query-username&gt;</span><br><span class="line">make docker-build IMG=quay.io/<span class="variable">$USERNAME</span>/memcached-operator:v0.0.1</span><br><span class="line">make docker-push IMG=quay.io/<span class="variable">$USERNAME</span>/memcached-operator:v0.0.1</span><br></pre></td></tr></table></figure><p>部署operator</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make deploy IMG=quay.io/<span class="variable">$USERNAME</span>/memcached-operator:v0.0.1</span><br></pre></td></tr></table></figure><p>清理数据两种方式</p><ol><li><p>添加Makefile undeploy字段</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">undeploy:</span></span><br><span class="line">$KUSTOMIZE build config/default | kubectl delete -f -</span><br></pre></td></tr></table></figure></li><li><p>完成安装后采用命令形式删除资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make undeploy</span><br></pre></td></tr></table></figure><h2 id="operator操作范围"><a href="#operator操作范围" class="headerlink" title="operator操作范围"></a>operator操作范围</h2></li><li><p>需要在NewManager时定义namesapce</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options&#123;</span><br><span class="line">Scheme:             scheme,</span><br><span class="line">MetricsBindAddress: metricsAddr,</span><br><span class="line">Port:               <span class="number">9443</span>,</span><br><span class="line">LeaderElection:     enableLeaderElection,</span><br><span class="line">LeaderElectionID:   <span class="string">&quot;f1c5ece8.example.com&quot;</span>,</span><br><span class="line">Namespace:<span class="string">&quot;operator-namespace&quot;</span>,<span class="comment">//手动添加</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>监控一组名称空间</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">multiNamespace := []<span class="keyword">string</span>&#123;<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>&#125; <span class="comment">//手动添加，一组名称空间</span></span><br><span class="line"></span><br><span class="line">mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options&#123;</span><br><span class="line">Scheme:             scheme,</span><br><span class="line">MetricsBindAddress: metricsAddr,</span><br><span class="line">Port:               <span class="number">9443</span>,</span><br><span class="line">LeaderElection:     enableLeaderElection,</span><br><span class="line">LeaderElectionID:   <span class="string">&quot;f1c5ece8.example.com&quot;</span>,</span><br><span class="line">Namespace:<span class="string">&quot;operator-namespace&quot;</span>,<span class="comment">//手动添加所属名称空间</span></span><br><span class="line">NewCache:cache.MultiNamespacedCacheBuilder(multiNamespace),<span class="comment">//手动添加 监控的名称空间</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>授予operator permissions 是由config/rbac下的role.yaml 和 role_binding.yaml来决定的。</p><ol><li>如果需要更改operator的权限需要更改这两个文件</li></ol></li><li><p>采用role权限来替换rolebinding，</p><ol><li>需要指定namespace如上面第一条增加newManager函数的namespace值。</li><li>修改RBAC markers的内容(上面的内容)-启动make manifest自动修改role.yaml文件</li></ol></li><li><p>使用读取环境变了的形式，捕获namespace</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getWatchNamespace returns the Namespace the operator should be watching for changes</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWatchNamespace</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;<span class="comment">//手动添加 使用环境变量的形式控制</span></span><br><span class="line"><span class="comment">// WatchNamespaceEnvVar is the constant for env variable WATCH_NAMESPACE</span></span><br><span class="line"><span class="comment">// which specifies the Namespace to watch.</span></span><br><span class="line"><span class="comment">// An empty value means the operator is running with cluster scope.</span></span><br><span class="line"><span class="keyword">var</span> watchNamespaceEnvVar = <span class="string">&quot;WATCH_NAMESPACE&quot;</span></span><br><span class="line"></span><br><span class="line">ns, found := os.LookupEnv(watchNamespaceEnvVar)</span><br><span class="line"><span class="keyword">if</span> !found &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;%s must be set&quot;</span>, watchNamespaceEnvVar)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ns, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>其次修改NewManager的namespace的部分。</p></li><li><p>还需要修改config/manager/manager.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/manager</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--enable-leader-election</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">controller:latest</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">manager</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">30Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">20Mi</span></span><br><span class="line">        <span class="comment"># 以下都是手动添加部分</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">WATCH_NAMESPACE</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br></pre></td></tr></table></figure></li><li><p>以上manager修改    <code>WATCH_NAMESPACE</code> here will always be set as the namespace where the operator is deployed.</p></li></ul></li><li><p>添加多个namespace的方法</p><ol><li>添加辅助函数</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;brew安装operator-sdk&quot;&gt;&lt;a href=&quot;#brew安装operator-sdk&quot; class=&quot;headerlink&quot; title=&quot;brew安装operator-sdk&quot;&gt;&lt;/a&gt;brew安装operator-sdk&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>md5sum和md5工具的使用</title>
    <link href="http://example.com/2021/01/07/md5%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/01/07/md5%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-07T08:02:06.444Z</published>
    <updated>2021-01-07T08:34:46.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="md5sum工具的使用-linux"><a href="#md5sum工具的使用-linux" class="headerlink" title="md5sum工具的使用(linux)"></a>md5sum工具的使用(linux)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">用法：md5sum [选项]... [文件]...</span><br><span class="line">显示或检查 MD5(128-bit) 校验和。</span><br><span class="line">若没有文件选项，或者文件处为<span class="string">&quot;-&quot;</span>，则从标准输入读取。</span><br><span class="line"></span><br><span class="line">  -b, --binary          以二进制模式读取</span><br><span class="line">  -c, --check           从文件中读取MD5 的校验值并予以检查</span><br><span class="line">      --tag            create a BSD-style checksum</span><br><span class="line">  -t, --text            以纯文本模式读取(默认)</span><br><span class="line">  Note: There is no difference between binary and text mode option on GNU system.</span><br><span class="line"></span><br><span class="line">The following four options are useful only when verifying checksums:</span><br><span class="line">      --quiet          don<span class="string">&#x27;t print OK for each successfully verified file</span></span><br><span class="line"><span class="string">      --status         don&#x27;</span>t output anything, status code shows success</span><br><span class="line">      --strict         <span class="built_in">exit</span> non-zero <span class="keyword">for</span> improperly formatted checksum lines</span><br><span class="line">  -w, --warn           warn about improperly formatted checksum lines</span><br><span class="line"></span><br><span class="line">      --<span class="built_in">help</span>            显示此帮助信息并退出</span><br><span class="line">      --version         显示版本信息并退出</span><br><span class="line"></span><br><span class="line">The sums are computed as described <span class="keyword">in</span> RFC 1321.  When checking, the input</span><br><span class="line">should be a former output of this program.  The default mode is to <span class="built_in">print</span></span><br><span class="line">a line with checksum, a character indicating input mode (<span class="string">&#x27;*&#x27;</span> <span class="keyword">for</span> binary,</span><br><span class="line">space <span class="keyword">for</span> text), and name <span class="keyword">for</span> each FILE.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上面的内容可以看到md5sum确实强大。</p><p>比如我想检验yum文件的md5码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">md5sum yum</span><br><span class="line">af3eaddb82d77ebb8eaa42e27f61b2ed  yum</span><br></pre></td></tr></table></figure><h2 id="md5工具的使用-mac"><a href="#md5工具的使用-mac" class="headerlink" title="md5工具的使用(mac)"></a>md5工具的使用(mac)</h2><ul><li>Mac作为开发者的操作系统，要是没有md5sum那就….苹果公司分装的工具更加直接就叫md5，他就是用来检验md5码的。</li></ul><ul><li>使用md5</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md5 prometheus-2.24.0.linux-arm64.tar.gz</span><br><span class="line"></span><br><span class="line">MD5 (prometheus-2.24.0.linux-arm64.tar.gz) = a400889be94e5beae64bcbdfa0896fee</span><br></pre></td></tr></table></figure><p>以上就是使用说明。。。。。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md5 --h</span><br><span class="line">md5: illegal option -- -</span><br><span class="line">usage: md5 [-pqrtx] [-s string] [files ...]</span><br></pre></td></tr></table></figure><p><img src="/2021/01/07/md5%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/%E9%BB%91%E4%BA%BA%E9%97%AE%E5%8F%B7.jpeg" alt="黑人问号"></p><p> （WC这操作说明能更简陋点吗？）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;md5sum工具的使用-linux&quot;&gt;&lt;a href=&quot;#md5sum工具的使用-linux&quot; class=&quot;headerlink&quot; title=&quot;md5sum工具的使用(linux)&quot;&gt;&lt;/a&gt;md5sum工具的使用(linux)&lt;/h2&gt;&lt;figure cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kubeedge源码分析(一).md</title>
    <link href="http://example.com/2021/01/05/kubeedge%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%80)/"/>
    <id>http://example.com/2021/01/05/kubeedge%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%80)/</id>
    <published>2021-01-05T12:50:20.798Z</published>
    <updated>2021-01-05T12:51:54.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><hr><table><thead><tr><th>组件名</th><th>组件功能</th></tr></thead><tbody><tr><td>edge_mesh</td><td>服务网格解决方案</td></tr><tr><td>edge_site</td><td>边缘独立集群解决方案</td></tr><tr><td>mappers</td><td>物联网协议实现包</td></tr><tr><td>keadm</td><td>kubeedge的一键部署工具</td></tr></tbody></table><table><thead><tr><th>组件名</th><th>代码目录</th><th>组件启动入口</th></tr></thead><tbody><tr><td>cloudcore</td><td>kubeedge/cloud</td><td>kubeedge/cloud/cmd/cloudcore/cloudcore.go，kubeedge/cloud/cmd/admission/admission.go，kubeedge/cloud/cmd/csidriver/csidriver.go</td></tr><tr><td>edgecore</td><td>kubeedge/edge</td><td>kubeedge/edge/cmd/edgecore/edgecore.go</td></tr><tr><td>edge_mesh</td><td>kubeedge/edgemesh</td><td>kubeedge/edgemesh/cmd/edgemesh.go</td></tr><tr><td>edge_site</td><td>kubeedge/edgesite</td><td>kubeedge/edgesite/cmd/edgesite.go</td></tr></tbody></table><h2 id="cloudcore源码分析"><a href="#cloudcore源码分析" class="headerlink" title="cloudcore源码分析"></a>cloudcore源码分析</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">command := app.NewCloudCoreCommand()<span class="comment">//cobra调用新建函数</span></span><br><span class="line">logs.InitLogs()</span><br><span class="line"><span class="keyword">defer</span> logs.FlushLogs()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := command.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------- app.NewCloudCoreCommand()</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCloudCoreCommand</span><span class="params">()</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">opts := options.NewCloudCoreOptions()</span><br><span class="line">cmd := &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;cloudcore&quot;</span>,</span><br><span class="line">Long: ...,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">config, err := opts.Config()</span><br><span class="line">      ...</span><br><span class="line">registerModules(config)<span class="comment">//注册cloudcore的功能模块</span></span><br><span class="line">...</span><br><span class="line">core.Run()<span class="comment">//启动所有注册模版</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> cmd</span><br><span class="line">&#125;</span><br><span class="line">-------------------------- registerModules(config)</span><br><span class="line"><span class="comment">// registerModules register all the modules started in cloudcore</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerModules</span><span class="params">(c *v1alpha1.CloudCoreConfig)</span></span> &#123;</span><br><span class="line">cloudhub.Register(c.Modules.CloudHub, c.KubeAPIConfig)</span><br><span class="line">edgecontroller.Register(c.Modules.EdgeController, c.KubeAPIConfig, <span class="string">&quot;&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">devicecontroller.Register(c.Modules.DeviceController, c.KubeAPIConfig)</span><br><span class="line">synccontroller.Register(c.Modules.SyncController, c.KubeAPIConfig)</span><br><span class="line">cloudstream.Register(c.Modules.CloudStream)</span><br><span class="line">&#125;</span><br><span class="line">-------------------------- core.Run()</span><br><span class="line"><span class="comment">// Run starts the modules and in the end does module cleanup</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Address the module registration and start the core</span></span><br><span class="line">StartModules()</span><br><span class="line"><span class="comment">// monitor system signal and shutdown gracefully</span></span><br><span class="line">GracefulShutdown()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>总结上面代码，通过cobra自动启动NewCloudCoreCommand，把所有模块注册到registerModules，使用Run函数启动</li></ul><h2 id="edgecore源码分析"><a href="#edgecore源码分析" class="headerlink" title="edgecore源码分析"></a>edgecore源码分析</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">command := app.NewEdgeCoreCommand()<span class="comment">//cobra调用新建函数</span></span><br><span class="line">logs.InitLogs()</span><br><span class="line"><span class="keyword">defer</span> logs.FlushLogs()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := command.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------- app.NewEdgeCoreCommand()</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEdgeCoreCommand</span><span class="params">()</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">opts := options.NewEdgeCoreOptions()</span><br><span class="line">cmd := &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;edgecore&quot;</span>,</span><br><span class="line">Long: ...,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">config, err := opts.Config()</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Check the running environment by default</span></span><br><span class="line">checkEnv := os.Getenv(<span class="string">&quot;CHECK_EDGECORE_ENVIRONMENT&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> checkEnv != <span class="string">&quot;false&quot;</span> &#123;</span><br><span class="line"><span class="comment">// Check running environment before run edge core</span></span><br><span class="line"><span class="keyword">if</span> err := environmentCheck(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">klog.Fatal(fmt.Errorf(<span class="string">&quot;Failed to check the running environment: %v&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get edge node local ip</span></span><br><span class="line"><span class="keyword">if</span> config.Modules.Edged.NodeIP == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">hostnameOverride, err := os.Hostname()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">hostnameOverride = constants.DefaultHostnameOverride</span><br><span class="line">&#125;</span><br><span class="line">localIP, _ := util.GetLocalIP(hostnameOverride)</span><br><span class="line">config.Modules.Edged.NodeIP = localIP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">registerModules(config)<span class="comment">//edgecore注册模块</span></span><br><span class="line"><span class="comment">// start all modules</span></span><br><span class="line">core.Run()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> cmd</span><br><span class="line">&#125;</span><br><span class="line">-------------------------- 同理注册模块 registerModules(config)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerModules</span><span class="params">(c *v1alpha1.EdgeCoreConfig)</span></span> &#123;</span><br><span class="line">devicetwin.Register(c.Modules.DeviceTwin, c.Modules.Edged.HostnameOverride)</span><br><span class="line">edged.Register(c.Modules.Edged)</span><br><span class="line">edgehub.Register(c.Modules.EdgeHub, c.Modules.Edged.HostnameOverride)</span><br><span class="line">eventbus.Register(c.Modules.EventBus, c.Modules.Edged.HostnameOverride)</span><br><span class="line">edgemesh.Register(c.Modules.EdgeMesh)</span><br><span class="line">metamanager.Register(c.Modules.MetaManager)</span><br><span class="line">servicebus.Register(c.Modules.ServiceBus)</span><br><span class="line">edgestream.Register(c.Modules.EdgeStream, c.Modules.Edged.HostnameOverride, c.Modules.Edged.NodeIP)</span><br><span class="line">test.Register(c.Modules.DBTest)</span><br><span class="line"><span class="comment">// Note: Need to put it to the end, and wait for all models to register before executing</span></span><br><span class="line">dbm.InitDBConfig(c.DataBase.DriverName, c.DataBase.AliasName, c.DataBase.DataSource)</span><br><span class="line">&#125;</span><br><span class="line">-------------------------- core.Run()</span><br><span class="line"><span class="comment">// Run starts the modules and in the end does module cleanup</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Address the module registration and start the core</span></span><br><span class="line">StartModules()</span><br><span class="line"><span class="comment">// monitor system signal and shutdown gracefully</span></span><br><span class="line">GracefulShutdown()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>edgemesh.Register模块已经整合到registerModules里面去了</p><h2 id="edgesite源码分析"><a href="#edgesite源码分析" class="headerlink" title="edgesite源码分析"></a>edgesite源码分析</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">command := app.NewEdgeSiteCommand()<span class="comment">//创建</span></span><br><span class="line">logs.InitLogs()</span><br><span class="line"><span class="keyword">defer</span> logs.FlushLogs()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := command.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEdgeSiteCommand</span><span class="params">()</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">opts := options.NewEdgeSiteOptions()</span><br><span class="line">cmd := &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;edgesite&quot;</span>,</span><br><span class="line">Long: ...,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">registerModules(config)<span class="comment">//注册</span></span><br><span class="line"><span class="comment">// start all modules</span></span><br><span class="line">core.Run()<span class="comment">//激活</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> cmd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerModules</span><span class="params">(c *v1alpha1.EdgeSiteConfig)</span></span> &#123;</span><br><span class="line">edged.Register(c.Modules.Edged)</span><br><span class="line">edgecontroller.Register(c.Modules.EdgeController, c.KubeAPIConfig, c.Modules.Edged.HostnamgieOverride, <span class="literal">true</span>)</span><br><span class="line">metamanager.Register(c.Modules.MetaManager)</span><br><span class="line"><span class="comment">// Nodte: Need to put it to the end, and wait for all models to register before executing</span></span><br><span class="line">dbm.InitDBConfig(c.DataBase.DriverName, c.DataBase.AliasName, c.DataBase.DataSource)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="共用框架beehive"><a href="#共用框架beehive" class="headerlink" title="共用框架beehive"></a>共用框架beehive</h2><ul><li><p>以下注册运行模块(edgecore/cloudcore/edgemesh)代码一致性很高，我就单分析cloudcore另外两个的逻辑也是一样的。</p></li><li><p>看看Register函数做了些什么</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(hub *v1alpha1.CloudHub, kubeAPIConfig *v1alpha1.KubeAPIConfig)</span></span> &#123;</span><br><span class="line">hubconfig.InitConfigure(hub, kubeAPIConfig)</span><br><span class="line">core.Register(newCloudHub(hub.Enable))<span class="comment">//使用框架进行注册操作</span></span><br><span class="line">&#125;</span><br><span class="line">-------------进到Register</span><br><span class="line"><span class="keyword">type</span> Module <span class="keyword">interface</span> &#123;</span><br><span class="line">Name() <span class="keyword">string</span></span><br><span class="line">Group() <span class="keyword">string</span></span><br><span class="line">Start()</span><br><span class="line">Enable() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// Modules map</span></span><br><span class="line">modules         <span class="keyword">map</span>[<span class="keyword">string</span>]Module</span><br><span class="line">disabledModules <span class="keyword">map</span>[<span class="keyword">string</span>]Module</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">modules = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Module)</span><br><span class="line">disabledModules = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Module)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register register module</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(m Module)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> m.Enable() &#123;</span><br><span class="line">modules[m.Name()] = m</span><br><span class="line">klog.Infof(<span class="string">&quot;Module %v registered successfully&quot;</span>, m.Name())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">disabledModules[m.Name()] = m</span><br><span class="line">klog.Warningf(<span class="string">&quot;Module %v is disabled, do not register&quot;</span>, m.Name())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以看到modules是一个map，Module是一个接口，里面有一个方法。Register的作用就是把Module接口放到全局变量modules中。</p></li><li><p>再看看core.Run()的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run starts the modules and in the end does module cleanup</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Address the module registration and start the core</span></span><br><span class="line">StartModules()</span><br><span class="line"><span class="comment">// monitor system signal and shutdown gracefully</span></span><br><span class="line">GracefulShutdown()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>追到StartModules</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StartModules starts modules that are registered</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartModules</span><span class="params">()</span></span> &#123;</span><br><span class="line">beehiveContext.InitContext(beehiveContext.MsgCtxTypeChannel)</span><br><span class="line"></span><br><span class="line">modules := GetModules()</span><br><span class="line"><span class="keyword">for</span> name, module := <span class="keyword">range</span> modules &#123;</span><br><span class="line"><span class="comment">//Init the module</span></span><br><span class="line">beehiveContext.AddModule(name)</span><br><span class="line"><span class="comment">//Assemble typeChannels for sendToGroup</span></span><br><span class="line">beehiveContext.AddModuleGroup(name, module.Group())</span><br><span class="line"><span class="keyword">go</span> module.Start()</span><br><span class="line">klog.Infof(<span class="string">&quot;Starting module %v&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetModules gets modules map</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetModules</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">Module</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> modules</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>StartModules 功能：循环遍历register的modul并加入到beehiveContext里面去。gorotine start方法启动所有module插件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GracefulShutdown is if it gets the special signals it does modules cleanup</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GracefulShutdown</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(c, syscall.SIGINT, syscall.SIGHUP, syscall.SIGTERM,</span><br><span class="line">syscall.SIGQUIT, syscall.SIGILL, syscall.SIGTRAP, syscall.SIGABRT)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> s := &lt;-c:</span><br><span class="line">klog.Infof(<span class="string">&quot;Get os signal %v&quot;</span>, s.String())</span><br><span class="line"><span class="comment">//Cleanup each modules</span></span><br><span class="line">beehiveContext.Cancel()</span><br><span class="line">modules := GetModules()</span><br><span class="line"><span class="keyword">for</span> name, _ := <span class="keyword">range</span> modules &#123;</span><br><span class="line">klog.Infof(<span class="string">&quot;Cleanup module %v&quot;</span>, name)</span><br><span class="line">beehiveContext.Cleanup(name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GracefulShutdown功能：如果设置了signals，就把该modules清除掉。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h1&gt;&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件名&lt;/th&gt;
&lt;th&gt;组件功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>github图片如何显示出来</title>
    <link href="http://example.com/2021/01/05/github%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA/"/>
    <id>http://example.com/2021/01/05/github%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA/</id>
    <published>2021-01-05T08:36:47.237Z</published>
    <updated>2021-01-05T08:46:13.650Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>对于我这个一天不登github就心慌的人来说，github图片不能显示，是一个大问题。</p></li><li><p>主要原因dns污染。</p></li><li><p>解决方法，配置本地hosts文件解决，中国区dns污染问题</p></li><li><p>mac电脑</p><ul><li>终端输入sudo vi /etc/hosts。把下面内容添加进去</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub Start</span></span><br><span class="line">192.30.253.112 Build software better, together</span><br><span class="line">192.30.253.119 gist.github.com</span><br><span class="line">151.101.184.133 assets-cdn.github.com</span><br><span class="line">151.101.184.133 raw.githubusercontent.com</span><br><span class="line">151.101.184.133 gist.githubusercontent.com</span><br><span class="line">151.101.184.133 cloud.githubusercontent.com</span><br><span class="line">151.101.184.133 camo.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars0.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars8.githubusercontent.com</span><br><span class="line"><span class="comment"># GitHub End</span></span><br></pre></td></tr></table></figure><ul><li>保存退出，登陆github刷新就可以显示图片了</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于我这个一天不登github就心慌的人来说，github图片不能显示，是一个大问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要原因dns污染。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决方法，配置本地hosts文件解决，中国区dns污染问题&lt;/p&gt;
&lt;/li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kubeedge 核心架构组件详解</title>
    <link href="http://example.com/2021/01/05/kubeedge%E7%AC%94%E8%AE%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2021/01/05/kubeedge%E7%AC%94%E8%AE%B0%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-01-05T03:24:22.448Z</published>
    <updated>2021-01-05T12:52:27.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kubeedge分为两个可执行程序（cloudcore-edgecore）-8个组件"><a href="#kubeedge分为两个可执行程序（cloudcore-edgecore）-8个组件" class="headerlink" title="kubeedge分为两个可执行程序（cloudcore/edgecore）- 8个组件"></a>kubeedge分为两个可执行程序（cloudcore/edgecore）- 8个组件</h2><h3 id="cloudcore"><a href="#cloudcore" class="headerlink" title="cloudcore:"></a>cloudcore:</h3><ol><li>CloudHub：云中的通信接口模块。</li><li>EdgeController：管理Edge节点。</li><li>devicecontroller 负责设备管理。</li></ol><h3 id="edgecore"><a href="#edgecore" class="headerlink" title="edgecore:"></a>edgecore:</h3><ol><li>Edged：在边缘管理容器化的应用程序。</li><li>EdgeHub：Edge上的通信接口模块。</li><li>EventBus：使用MQTT处理内部边缘通信。</li><li>DeviceTwin：它是用于处理设备元数据的设备的软件镜像。</li><li>MetaManager：它管理边缘节点上的元数据。</li></ol><ul><li>Edged详解：<ol><li>和kubelet的功能相似。从metamanager接收和处理pod</li><li>保留config map和secrets的缓存</li><li>其他：<ol><li>CRI边缘化</li><li>container/images GC</li><li>volume管理</li></ol></li></ol></li></ul><h3 id="各模块详解"><a href="#各模块详解" class="headerlink" title="各模块详解"></a>各模块详解</h3><ul><li><p>eventbus</p><ol><li>主要用来发送接收mqtt的消息接口（如蓝牙设备等等）</li><li>三种模式 internalMqttMode/externalMqttMode/bothMqttMode</li></ol></li><li><p>metamanager</p><ol><li>MetaManager是edged和edgehub之间的消息处理器。它还负责将元数据存储到轻量级数据库（SQLite）或从中检索元数据。</li><li>因为连接SQLite，所以能进行CRUD操作</li></ol></li><li><p>Edgehub</p><ol><li>Edge Hub使用Web socket或QUIC协议和CloudHub组件进行交互。同步云端更新和报告边缘端主机状态</li></ol></li><li><p>DeviceTwin</p><ol><li>负责存储设备状态，处理设备属性，处理设备孪生操作，在边缘设备和边缘节点之间创建成员资格，将设备状态同步到云以及在边缘和云之间同步设备孪生信息。它还为应用程序提供查询接口。</li><li>由4个子模块组成：membership，communication，device和device twin</li></ol></li></ul><hr><h2 id="以下为云上组件"><a href="#以下为云上组件" class="headerlink" title="  以下为云上组件"></a>  以下为云上组件</h2><hr><ul><li>Edge Controller<ol><li>EdgeController是Kubernetes Api服务器和Edgecore之间的桥梁</li></ol></li><li>CloudHub<ol><li>CloudHub是cloudcore的一个模块，是Controller和Edge端之间的中介。它同时支持基于Web套接字的连接以及QUIC协议访问。</li><li>功能：启用边缘与控制器之间的通信</li></ol></li><li>Device Controller<ol><li>k8s CRD来描述设备metadata/status ，devicecontroller在云和边缘之间同步，有两个goroutines: <code>upstream controller</code>/downstream controller</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;kubeedge分为两个可执行程序（cloudcore-edgecore）-8个组件&quot;&gt;&lt;a href=&quot;#kubeedge分为两个可执行程序（cloudcore-edgecore）-8个组件&quot; class=&quot;headerlink&quot; title=&quot;kubeedge</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>dockerfile</title>
    <link href="http://example.com/2021/01/04/dockerfile/"/>
    <id>http://example.com/2021/01/04/dockerfile/</id>
    <published>2021-01-04T07:36:23.000Z</published>
    <updated>2021-01-04T07:40:35.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dockerfile构建镜像"><a href="#dockerfile构建镜像" class="headerlink" title="dockerfile构建镜像"></a>dockerfile构建镜像</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> etcd /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> etcdctl /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /var/etcd/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /var/lib/etcd/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alpine Linux doesn&#x27;t use pam, which means that there is no /etc/nsswitch.conf,</span></span><br><span class="line"><span class="comment"># but Golang relies on /etc/nsswitch.conf to check the order of DNS resolving</span></span><br><span class="line"><span class="comment"># (see https://github.com/golang/go/commit/9dee7771f561cf6aee081c0af6658cc81fac3918)</span></span><br><span class="line"><span class="comment"># To fix this we just create /etc/nsswitch.conf and add the following line:</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4&#x27;</span> &gt;&gt; /etc/nsswitch.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">2379</span> <span class="number">2380</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define default command.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/usr/local/bin/etcd&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><ul><li>docker build -t etcd .</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dockerfile构建镜像&quot;&gt;&lt;a href=&quot;#dockerfile构建镜像&quot; class=&quot;headerlink&quot; title=&quot;dockerfile构建镜像&quot;&gt;&lt;/a&gt;dockerfile构建镜像&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker启动etcd</title>
    <link href="http://example.com/2021/01/03/docker%E5%90%AF%E5%8A%A8etcd/"/>
    <id>http://example.com/2021/01/03/docker%E5%90%AF%E5%8A%A8etcd/</id>
    <published>2021-01-03T14:48:22.000Z</published>
    <updated>2021-01-04T08:48:48.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>docker run <br>-p 2379:2379 <br>-p 2380:2380 <br>–name etcd-gcr-v3.4.0 <br>quay.io/coreos/etcd:v3.4.0 <br>/usr/local/bin/etcd <br>–name s1 <br>–data-dir /etcd-data <br>–listen-client-urls <a href="http://0.0.0.0:2379/">http://0.0.0.0:2379</a> <br>–advertise-client-urls <a href="http://0.0.0.0:2379/">http://0.0.0.0:2379</a> <br>–listen-peer-urls <a href="http://0.0.0.0:2380/">http://0.0.0.0:2380</a> <br>–initial-advertise-peer-urls <a href="http://0.0.0.0:2380/">http://0.0.0.0:2380</a> <br>–initial-cluster s1=<a href="http://0.0.0.0:2380/">http://0.0.0.0:2380</a> <br>–initial-cluster-token tkn <br>–initial-cluster-state new <br>–log-level info <br>–logger zap <br>–log-outputs stderr</p><ul><li>我遇到的坑</li></ul><p>默认启动都是localhost，结果外部访问不能访问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;启动服务&quot;&gt;&lt;a href=&quot;#启动服务&quot; class=&quot;headerlink&quot; title=&quot;启动服务&quot;&gt;&lt;/a&gt;启动服务&lt;/h2&gt;&lt;p&gt;docker run &lt;br&gt;-p 2379:2379 &lt;br&gt;-p 2380:2380 &lt;br&gt;–name etcd-gc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go-zero脚手架搭建微服务笔记</title>
    <link href="http://example.com/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-03T07:02:38.491Z</published>
    <updated>2021-01-07T12:34:57.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><ul><li>安装etcd mysql redis</li></ul><p>我都是放在docker里的，如下图所示<br><img src="/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/docker%E5%87%86%E5%A4%87%E5%AE%B9%E5%99%A8.png" alt="docker启动状况"></p><ul><li>安装protoc-gen-go 和 goctl工具</li></ul><p>go get -u github.com/golang/protobuf/protoc-gen-go<br>go get -u github.com/tal-tech/go-zero/tools/goctl</p><h2 id="生成目录"><a href="#生成目录" class="headerlink" title="生成目录"></a>生成目录</h2><ul><li>goctl api -o bookstore.api<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Done.</span><br></pre></td></tr></table></figure>显示上面提示说明成功生成</li></ul><p><img src="/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9A%84api%E6%96%87%E4%BB%B6.png" alt="生成api文件"></p><p>编写api文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">type (</span><br><span class="line">    addReq &#123;</span><br><span class="line">        book string &#96;form:&quot;book&quot;&#96;</span><br><span class="line">        price int64 &#96;form:&quot;price&quot;&#96;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    addResp &#123;</span><br><span class="line">        ok bool &#96;json:&quot;ok&quot;&#96;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type (</span><br><span class="line">    checkReq &#123;</span><br><span class="line">        book string &#96;form:&quot;book&quot;&#96;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    checkResp &#123;</span><br><span class="line">        found bool &#96;json:&quot;found&quot;&#96;</span><br><span class="line">        price int64 &#96;json:&quot;price&quot;&#96;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service bookstore-api &#123;</span><br><span class="line">    @handler AddHandler</span><br><span class="line">    get &#x2F;add (addReq) returns (addResp)</span><br><span class="line">    </span><br><span class="line">    @handler CheckHandler</span><br><span class="line">    get &#x2F;check (checkReq) returns (checkResp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完上面内容，启动生成命令</p><ul><li>goctl api go -api bookstore.api -dir .</li></ul><p><img src="/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9A%84api%E6%96%87%E4%BB%B6.png" alt="生成配置文件"></p><h2 id="启动测试服务"><a href="#启动测试服务" class="headerlink" title="启动测试服务"></a>启动测试服务</h2><ul><li>go run bookstore.go -f etc/bookstore-api.yaml</li></ul><p><img src="/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/apiserver%E5%90%AF%E5%8A%A8.png" alt="apiserver启动"></p><p>访问结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -i &quot;http:&#x2F;&#x2F;localhost:8888&#x2F;check?book&#x3D;go-zero&quot;</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Date: Sun, 03 Jan 2021 07:46:30 GMT</span><br><span class="line">Content-Length: 25</span><br><span class="line">&#123;&quot;found&quot;:false,&quot;price&quot;:0&#125;</span><br></pre></td></tr></table></figure><h2 id="编写rpc服务（ADD服务）"><a href="#编写rpc服务（ADD服务）" class="headerlink" title="编写rpc服务（ADD服务）"></a>编写rpc服务（ADD服务）</h2><ul><li>创建rpc目录，进入目录</li><li>goctl rpc template -o add.proto 生成模版</li></ul><p>在文件夹中编写add.proto</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package add;</span><br><span class="line"></span><br><span class="line">message addReq &#123;</span><br><span class="line">    string book &#x3D; 1;</span><br><span class="line">    int64 price &#x3D; 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message addResp &#123;</span><br><span class="line">    bool ok &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service adder &#123;</span><br><span class="line">    rpc add(addReq) returns(addResp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>goctl rpc proto -src add.proto -dir . 生成rpc服务</li></ul><p><img src="/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/rpc%E7%94%9F%E6%88%90%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="rpc生成的目录结构"></p><ul><li>运行服务 go run add.go -f etc/add.yaml</li></ul><p>此处会去连接etcd的端口(如果没有etcd的服务就会在这里报错)，具体配置文件在rpc/etc/add.yaml</p><h2 id="编写rpc服务（CHECK服务）同上"><a href="#编写rpc服务（CHECK服务）同上" class="headerlink" title="编写rpc服务（CHECK服务）同上"></a>编写rpc服务（CHECK服务）同上</h2><h2 id="配置-api-server"><a href="#配置-api-server" class="headerlink" title="配置 api server"></a>配置 api server</h2><h3 id="bookstore-api-yaml把rpc服务写入"><a href="#bookstore-api-yaml把rpc服务写入" class="headerlink" title="bookstore-api.yaml把rpc服务写入"></a>bookstore-api.yaml把rpc服务写入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Add:</span><br><span class="line">  Etcd:</span><br><span class="line">    Hosts:</span><br><span class="line">      - localhost:2379</span><br><span class="line">    Key: add.rpc</span><br><span class="line">Check:</span><br><span class="line">  Etcd:</span><br><span class="line">    Hosts:</span><br><span class="line">      - localhost:2379</span><br><span class="line">    Key: check.rpc</span><br></pre></td></tr></table></figure><h3 id="修改internal-config-config-go如下，增加add-check服务依赖"><a href="#修改internal-config-config-go如下，增加add-check服务依赖" class="headerlink" title="修改internal/config/config.go如下，增加add/check服务依赖"></a>修改internal/config/config.go如下，增加add/check服务依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">type Config struct &#123;</span><br><span class="line">    rest.RestConf</span><br><span class="line">    Add   zrpc.RpcClientConf     &#x2F;&#x2F; 手动代码</span><br><span class="line">    Check zrpc.RpcClientConf     &#x2F;&#x2F; 手动代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改internal-svc-servicecontext-go"><a href="#修改internal-svc-servicecontext-go" class="headerlink" title="修改internal/svc/servicecontext.go"></a>修改internal/svc/servicecontext.go</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type ServiceContext struct &#123;</span><br><span class="line">    Config  config.Config</span><br><span class="line">    Adder   adder.Adder          &#x2F;&#x2F; 手动代码</span><br><span class="line">    Checker checker.Checker      &#x2F;&#x2F; 手动代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewServiceContext(c config.Config) *ServiceContext &#123;</span><br><span class="line">    return &amp;ServiceContext&#123;</span><br><span class="line">        Config:  c,</span><br><span class="line">        Adder:   adder.NewAdder(zrpc.MustNewClient(c.Add)),         &#x2F;&#x2F; 手动代码</span><br><span class="line">        Checker: checker.NewChecker(zrpc.MustNewClient(c.Check)),   &#x2F;&#x2F; 手动代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改internal-logic-addlogic-go里的Add"><a href="#修改internal-logic-addlogic-go里的Add" class="headerlink" title="修改internal/logic/addlogic.go里的Add"></a>修改internal/logic/addlogic.go里的Add</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func (l *AddLogic) Add(req types.AddReq) (*types.AddResp, error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 手动代码开始</span><br><span class="line">    resp, err :&#x3D; l.svcCtx.Adder.Add(l.ctx, &amp;adder.AddReq&#123;</span><br><span class="line">        Book:  req.Book,</span><br><span class="line">        Price: req.Price,</span><br><span class="line">    &#125;)</span><br><span class="line">    if err !&#x3D; nil &#123;</span><br><span class="line">        return nil, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &amp;types.AddResp&#123;</span><br><span class="line">        Ok: resp.Ok,</span><br><span class="line">    &#125;, nil</span><br><span class="line">    &#x2F;&#x2F; 手动代码结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同理修改internal-logic-checklogic-go里的Check"><a href="#同理修改internal-logic-checklogic-go里的Check" class="headerlink" title="同理修改internal/logic/checklogic.go里的Check"></a>同理修改internal/logic/checklogic.go里的Check</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func (l *CheckLogic) Check(req types.CheckReq) (*types.CheckResp, error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 手动代码开始</span><br><span class="line">    resp, err :&#x3D; l.svcCtx.Checker.Check(l.ctx, &amp;checker.CheckReq&#123;</span><br><span class="line">        Book:  req.Book,</span><br><span class="line">    &#125;)</span><br><span class="line">    if err !&#x3D; nil &#123;</span><br><span class="line">        logx.Error(err)</span><br><span class="line">        return &amp;types.CheckResp&#123;&#125;, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &amp;types.CheckResp&#123;</span><br><span class="line">        Found: resp.Found,</span><br><span class="line">        Price: resp.Price,</span><br><span class="line">    &#125;, nil</span><br><span class="line">    &#x2F;&#x2F; 手动代码结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义数据库表结构"><a href="#定义数据库表结构" class="headerlink" title="定义数据库表结构"></a>定义数据库表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `book`</span><br><span class="line">(</span><br><span class="line">  `book` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;book name&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;book price&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(`book`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><ul><li>连接上mysql数据库，创建gozero数据库</li></ul><p><img src="/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="创建数据库"></p><ul><li>idea连接数据库 参考连接：<a href="https://juejin.cn/post/6844904036802494477">https://juejin.cn/post/6844904036802494477</a></li></ul><p><img src="/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/idea%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE.png" alt="idea连接mysql数据库配置"></p><ul><li>使用idea命令执行sql指令。</li></ul><p><img src="/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/sql%E5%91%BD%E4%BB%A4%E6%8E%A7%E5%88%B6mysql.png" alt="sql命令控制mysql"></p><h3 id="生成redis-cache"><a href="#生成redis-cache" class="headerlink" title="生成redis cache"></a>生成redis cache</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goctl model mysql ddl -c -src book.sql -dir .</span><br></pre></td></tr></table></figure><h2 id="修改rpc代码调用crud-cache"><a href="#修改rpc代码调用crud-cache" class="headerlink" title="修改rpc代码调用crud cache"></a>修改rpc代码调用crud cache</h2><ul><li>在roc/add/etc/add.yaml和roc/check/etc/check.yaml加入下面的代码</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DataSource:</span> <span class="string">root:@tcp(localhost:3306)/gozero</span></span><br><span class="line"><span class="attr">Table:</span> <span class="string">book</span></span><br><span class="line"><span class="attr">Cache:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">localhost:6379</span></span><br></pre></td></tr></table></figure><ul><li><p>增加了mysql和redis cache配置</p></li><li><p>修改<code>rpc/add/internal/config.go</code>和<code>rpc/check/internal/config.go</code>，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">    zrpc.RpcServerConf</span><br><span class="line">    DataSource <span class="keyword">string</span>             <span class="comment">// 手动代码</span></span><br><span class="line">    Cache      cache.CacheConf    <span class="comment">// 手动代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>修改<code>rpc/add/internal/svc/servicecontext.go</code>和<code>rpc/check/internal/svc/servicecontext.go</code>，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ServiceContext <span class="keyword">struct</span> &#123;</span><br><span class="line">    c     config.Config</span><br><span class="line">    Model model.BookModel   <span class="comment">// 手动代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServiceContext</span><span class="params">(c config.Config)</span> *<span class="title">ServiceContext</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;ServiceContext&#123;</span><br><span class="line">        c:             c,</span><br><span class="line">        Model: model.NewBookModel(sqlx.NewMysql(c.DataSource), c.Cache), <span class="comment">// 手动代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>rpc/add/internal/logic/addlogic.go</code>，如下(逻辑代码)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *AddLogic)</span> <span class="title">Add</span><span class="params">(in *add.AddReq)</span> <span class="params">(*add.AddResp, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 手动代码开始</span></span><br><span class="line">    _, err := l.svcCtx.Model.Insert(model.Book&#123;</span><br><span class="line">        Book:  in.Book,</span><br><span class="line">        Price: in.Price,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;add.AddResp&#123;</span><br><span class="line">        Ok: <span class="literal">true</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">    <span class="comment">// 手动代码结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>rpc/check/internal/logic/checklogic.go</code>，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *CheckLogic)</span> <span class="title">Check</span><span class="params">(in *check.CheckReq)</span> <span class="params">(*check.CheckResp, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 手动代码开始</span></span><br><span class="line">    resp, err := l.svcCtx.Model.FindOne(in.Book)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;check.CheckResp&#123;</span><br><span class="line">        Found: <span class="literal">true</span>,</span><br><span class="line">        Price: resp.Price,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">    <span class="comment">// 手动代码结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>调用演示</p><ol><li>启动所有rpc服务</li><li>启动api服务</li><li>访问api服务</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i <span class="string">&quot;http://localhost:8888/add?book=go-zero&amp;price=10&quot;</span></span><br></pre></td></tr></table></figure><p>如下图显示运行</p><p><img src="/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/api%E8%AE%BF%E9%97%AE%E6%AD%A3%E5%B8%B81.png" alt="api访问正常1"></p><p>此时对于的rpc服务和api日志都会有响应</p></li><li><p>经过测试得，添加请求不会存入redis，读取请求会写入redis中。</p></li></ul><h2 id="benchmark抗压测试"><a href="#benchmark抗压测试" class="headerlink" title="benchmark抗压测试"></a>benchmark抗压测试</h2><ul><li>首先调整mysql的句柄数 </li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n 100000</span><br></pre></td></tr></table></figure><ul><li>使用wrk进行抗压测试</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -t10 -c1000 -d40s --latency <span class="string">&quot;http://localhost:8888/check?book=go-zero&quot;</span></span><br></pre></td></tr></table></figure><p>测试结果图如下：关于wrk参考链接（<a href="https://www.cnblogs.com/xinzhao/p/6233009.html%EF%BC%89">https://www.cnblogs.com/xinzhao/p/6233009.html）</a></p><p><img src="/2021/01/03/go-zero%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/%E6%8A%97%E5%8E%8B%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="抗压测试结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装etcd mysql redis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我都是放在docker里的，如下图所示&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>markdown笔记</title>
    <link href="http://example.com/2020/12/30/markdown%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/12/30/markdown%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-30T03:42:00.849Z</published>
    <updated>2020-12-30T10:48:10.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插图三种方式"><a href="#插图三种方式" class="headerlink" title="插图三种方式"></a>插图三种方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">基础格式：</span><br><span class="line">![Alt text](图片链接 &quot;optional title&quot;)</span><br><span class="line"></span><br><span class="line">方法一：插入本地图片</span><br><span class="line">![avatar](&#x2F;home&#x2F;picture&#x2F;1.png)</span><br><span class="line"></span><br><span class="line">方法二：插入网络图片</span><br><span class="line">![avatar](http:&#x2F;&#x2F;baidu.com&#x2F;pic&#x2F;doge.png)</span><br><span class="line"></span><br><span class="line">方法三：把图片存入markdown文件</span><br><span class="line">![avatar][base64str]</span><br><span class="line">[base64str]:data:image&#x2F;png;base64,iVBORw0......</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;插图三种方式&quot;&gt;&lt;a href=&quot;#插图三种方式&quot; class=&quot;headerlink&quot; title=&quot;插图三种方式&quot;&gt;&lt;/a&gt;插图三种方式&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基础命令日常总结</title>
    <link href="http://example.com/2020/12/29/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2020/12/29/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</id>
    <published>2020-12-29T06:31:08.664Z</published>
    <updated>2020-12-30T10:50:33.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="netstat-apn-grep-8080-或者-lsof-i-8080"><a href="#netstat-apn-grep-8080-或者-lsof-i-8080" class="headerlink" title="netstat -apn | grep 8080 或者 lsof -i:8080"></a>netstat -apn | grep 8080 或者 lsof -i:8080</h2><p>  根据端口查PID</p><h2 id="netstat-apn-grep-21299"><a href="#netstat-apn-grep-21299" class="headerlink" title="netstat -apn | grep 21299"></a>netstat -apn | grep 21299</h2><p>  根据PID查端口</p><h2 id="kill-9-PID"><a href="#kill-9-PID" class="headerlink" title="kill -9  PID"></a>kill -9  PID</h2><p>  杀死PID对应的端口</p><h2 id="nohup-main-gt-dev-null-2-gt-amp-1-amp"><a href="#nohup-main-gt-dev-null-2-gt-amp-1-amp" class="headerlink" title="nohup ./main &gt; /dev/null 2&gt;&amp;1 &amp;"></a>nohup ./main &gt; /dev/null 2&gt;&amp;1 &amp;</h2><p>  后端启动main服务, 并且返回PID号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">参考链接： https://blog.csdn.net/m0_46657040/article/details/109611803</span><br><span class="line">[root@k8s-master-81 harmoryedge]<span class="comment"># nohup ./main &gt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line">[1] 21299</span><br></pre></td></tr></table></figure><h2 id="cd-proc-21299-amp-amp-ll"><a href="#cd-proc-21299-amp-amp-ll" class="headerlink" title="cd /proc/21299 &amp;&amp; ll"></a>cd /proc/21299 &amp;&amp; ll</h2><p>  通过PID号查询服务路径等信息</p><h2 id="npm-run-start"><a href="#npm-run-start" class="headerlink" title="npm run start"></a>npm run start</h2><p>  启动前端start程序(react或者vue)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;netstat-apn-grep-8080-或者-lsof-i-8080&quot;&gt;&lt;a href=&quot;#netstat-apn-grep-8080-或者-lsof-i-8080&quot; class=&quot;headerlink&quot; title=&quot;netstat -apn | grep </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>YOU-GET笔记</title>
    <link href="http://example.com/2020/12/25/you-get%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/12/25/you-get%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-25T06:29:11.892Z</published>
    <updated>2020-12-30T10:51:36.257Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>参考连接 <a href="https://github.com/soimort/you-get">https://github.com/soimort/you-get</a></p></li><li><p>安装： brew install you-get</p></li><li><p>使用</p><ul><li>you-get ‘<a href="https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;">https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</a></li></ul></li><li><p>查看详细信息</p><ul><li>you-get -i ‘<a href="https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;">https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参考连接 &lt;a href=&quot;https://github.com/soimort/you-get&quot;&gt;https://github.com/soimort/you-get&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装： brew install you-g</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go测试章节</title>
    <link href="http://example.com/2020/12/24/gotest%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/12/24/gotest%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-24T12:21:29.025Z</published>
    <updated>2020-12-30T10:49:27.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gotest文本如何书写"><a href="#gotest文本如何书写" class="headerlink" title="gotest文本如何书写"></a>gotest文本如何书写</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表格驱动测试</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXXX</span><span class="params">(t * testint.T)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 定义输入输出</span></span><br><span class="line">  tests := []<span class="keyword">struct</span>&#123;</span><br><span class="line">    in <span class="keyword">int</span></span><br><span class="line">    out <span class="keyword">int</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#123;</span><br><span class="line">  <span class="comment">// 测试数据</span></span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">1</span>&#125;，</span><br><span class="line">  &#123;<span class="number">2</span>, <span class="number">2</span>&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">  <span class="comment">//通过函数执行测试用例</span></span><br><span class="line">  actual := 需要测试的函数名(tt.in) </span><br><span class="line">  <span class="keyword">if</span> actual != tt.out &#123;</span><br><span class="line">    <span class="comment">//输出不匹配的信息</span></span><br><span class="line">    <span class="comment">//errof输出</span></span><br><span class="line">    t.Errof(t.Errorf(<span class="string">&quot;got %d for input %s; expected %d&quot;</span>, actual, tt.in, tt.out))</span><br><span class="line">    <span class="comment">//Skipf输出</span></span><br><span class="line">    t.Skipf(t.Errorf(<span class="string">&quot;got %d for input %s; expected %d&quot;</span>, actual, tt.in, tt.out))</span><br><span class="line">    <span class="comment">//logf输出</span></span><br><span class="line">    t.Logf(t.Errorf(<span class="string">&quot;got %d for input %s; expected %d&quot;</span>, actual, tt.in, tt.out))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表格驱动测试语句（后面通过正则匹配）<ul><li> go test -v -timeout 30s . -run ^TestXXX$</li></ul></li></ul><h1 id="go-test-和go-tool-性能测试"><a href="#go-test-和go-tool-性能测试" class="headerlink" title="go test 和go tool 性能测试"></a>go test 和go tool 性能测试</h1><p>（具体可以通过go tool cover 查询具体命令）</p><ul><li>go test -coverprofile=cover.out</li></ul><p>输出cpu覆盖率</p><ul><li>go tool cover -html=cover.out</li></ul><p>html显示cpu数据</p><ul><li><p>go test -bench xxx.go</p><p>目标文件bench性能测试,看花的时间</p></li></ul><h1 id="go-pprof测试"><a href="#go-pprof测试" class="headerlink" title="go pprof测试"></a>go pprof测试</h1><ul><li><p>go test help</p><p>help提示信息</p></li><li><p>go test -bench nonrepeatingsubstr -cpuprofile cpu.out </p><p>生成目标文件的cpu使用情况</p></li><li><p>go tool pprof cpu.out</p><ul><li>help</li><li>web<br>pprof交互式显示</li></ul></li></ul><h1 id="godoc-文档"><a href="#godoc-文档" class="headerlink" title="godoc 文档"></a>godoc 文档</h1><ul><li><p>godoc –help<br>godoc使用文档</p></li><li><p>godoc -http :6060<br>服务器形式打开go参考手册</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;gotest文本如何书写&quot;&gt;&lt;a href=&quot;#gotest文本如何书写&quot; class=&quot;headerlink&quot; title=&quot;gotest文本如何书写&quot;&gt;&lt;/a&gt;gotest文本如何书写&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;tab</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初看组件 7大组件+1个运行时（master 5 + node 2）</title>
    <link href="http://example.com/2020/12/18/kubernetes%E7%BB%84%E4%BB%B6%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/12/18/kubernetes%E7%BB%84%E4%BB%B6%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-18T06:03:37.149Z</published>
    <updated>2020-12-30T10:49:52.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="kube-apiserver（1）"><a href="#kube-apiserver（1）" class="headerlink" title="kube-apiserver（1）"></a>kube-apiserver（1）</h3><p>API 服务器是 Kubernetes 控制面的组件， 该组件公开了 Kubernetes API。 API 服务器是 Kubernetes 控制面的前端。</p><p>Kubernetes API 服务器的主要实现是 kube-apiserver。 kube-apiserver 设计上考虑了水平伸缩，也就是说，它可通过部署多个实例进行伸缩。 你可以运行 kube-apiserver 的多个实例，并在这些实例之间平衡流量。</p><h3 id="etcd-（2）"><a href="#etcd-（2）" class="headerlink" title="etcd （2）"></a>etcd （2）</h3><p>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</p><p>您的 Kubernetes 集群的 etcd 数据库通常需要有个备份计划。</p><p>要了解 etcd 更深层次的信息，请参考 etcd 文档。</p><h3 id="kube-scheduler（3）"><a href="#kube-scheduler（3）" class="headerlink" title="kube-scheduler（3）"></a>kube-scheduler（3）</h3><p>主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。</p><p>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。</p><h3 id="kube-controller-manager（4）"><a href="#kube-controller-manager（4）" class="headerlink" title="kube-controller-manager（4）"></a>kube-controller-manager（4）</h3><p>在主节点上运行 控制器 的组件。</p><p>从逻辑上讲，每个控制器都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。</p><p>这些控制器包括:</p><p>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。<br>副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。<br>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)。<br>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌.</p><h3 id="cloud-controller-manager（5）"><a href="#cloud-controller-manager（5）" class="headerlink" title="cloud-controller-manager（5）"></a>cloud-controller-manager（5）</h3><p>云控制器管理器是指嵌入特定云的控制逻辑的 控制平面组件。 云控制器管理器允许您链接聚合到云提供商的应用编程接口中， 并分离出相互作用的组件与您的集群交互的组件。<br>cloud-controller-manager 仅运行特定于云平台的控制回路。 如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的环境中不需要云控制器管理器。</p><p>与 kube-controller-manager 类似，cloud-controller-manager 将若干逻辑上独立的 控制回路组合到同一个可执行文件中，供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。</p><p>下面的控制器都包含对云平台驱动的依赖：</p><p>节点控制器（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除<br>路由控制器（Route Controller）: 用于在底层云基础架构中设置路由<br>服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器</p><h2 id="Node-组件"><a href="#Node-组件" class="headerlink" title="Node 组件"></a>Node 组件</h2><hr><h3 id="kubelet（6）"><a href="#kubelet（6）" class="headerlink" title="kubelet（6）"></a>kubelet（6）</h3><p>一个在集群中每个节点上运行的代理。 它保证容器都运行在 Pod 中。</p><p>kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p><h3 id="kube-proxy-（7）"><a href="#kube-proxy-（7）" class="headerlink" title="kube-proxy （7）"></a>kube-proxy （7）</h3><p>kube-proxy 是集群中每个节点上运行的网络代理， 实现 Kubernetes 服务（Service） 概念的一部分。</p><p>kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p><p>如果操作系统提供了数据包过滤层并可用的话，kube-proxy 会通过它来实现网络规则。否则， kube-proxy 仅转发流量本身。</p><h3 id="容器运行时（Container-Runtime）（8）"><a href="#容器运行时（Container-Runtime）（8）" class="headerlink" title="容器运行时（Container Runtime）（8）"></a>容器运行时（Container Runtime）（8）</h3><p>容器运行环境是负责运行容器的软件。</p><p>Kubernetes 支持多个容器运行环境: Docker、 containerd、CRI-O 以及任何实现 Kubernetes CRI (容器运行环境接口)。</p><hr><h2 id="插件（Addons）"><a href="#插件（Addons）" class="headerlink" title="插件（Addons）"></a>插件（Addons）</h2><hr><h3 id="cattle"><a href="#cattle" class="headerlink" title="cattle"></a>cattle</h3><p>有集群 DNS </p><h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><p>web 界面</p><h3 id="prometheus"><a href="#prometheus" class="headerlink" title="prometheus"></a>prometheus</h3><p>容器资源监控</p><h3 id="EFK"><a href="#EFK" class="headerlink" title="EFK"></a>EFK</h3><p>日志监控</p><hr><h1 id="node节点开始"><a href="#node节点开始" class="headerlink" title="node节点开始"></a>node节点开始</h1><ul><li>节点上的组件包括 kubelet、 容器运行时以及 kube-proxy。</li><li>节点于api服务器交互，通过节点上kubectl自注册入集群</li><li>子注册参数: 节点生成完成后通过kubeadm join注册<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;conditions&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Ready&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;reason&quot;</span>: <span class="string">&quot;KubeletReady&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;kubelet is posting ready status&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lastHeartbeatTime&quot;</span>: <span class="string">&quot;2019-06-05T18:38:35Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2019-06-05T11:41:27Z&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>Ready 条件处于 Unknown 或者 False 状态的时间超过了 pod-eviction-timeout, 默认是5分钟，就会被驱逐。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;kube-apiserver（1）&quot;&gt;&lt;a href=&quot;#kube-apiserver（1）&quot; class=&quot;headerlink&quot; title=&quot;kube-apiserver（1）&quot;&gt;&lt;/a&gt;kube-apiserver（1）&lt;/h3&gt;&lt;p&gt;API 服务器是 K</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>连接kubernetes</title>
    <link href="http://example.com/2020/12/10/kubernetesAPI%E8%B0%83%E7%94%A8/"/>
    <id>http://example.com/2020/12/10/kubernetesAPI%E8%B0%83%E7%94%A8/</id>
    <published>2020-12-10T06:18:12.992Z</published>
    <updated>2020-12-30T10:59:13.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="client-go"><a href="#client-go" class="headerlink" title="client-go"></a>client-go</h2><p> 通过client-go获取kubeconfig访问集群</p><p> 参考文献：<br> <a href="https://blog.csdn.net/qq_37950254/article/details/89603207">https://blog.csdn.net/qq_37950254/article/details/89603207</a></p><p> <a href="https://github.com/kubernetes/client-go/blob/master/examples/out-of-cluster-client-configuration/main.go">https://github.com/kubernetes/client-go/blob/master/examples/out-of-cluster-client-configuration/main.go</a></p><p> <a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/access-cluster-api/">https://kubernetes.io/zh/docs/tasks/administer-cluster/access-cluster-api/</a></p><p> <a href="https://my.oschina.net/u/4382516/blog/3303251">https://my.oschina.net/u/4382516/blog/3303251</a></p><p>普通调用的方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create sa my-sa </span><br><span class="line">$ kubect1 create clusterrolebinding my-clusterrolebinding --clusterrole-cluster-admin --serviceaccount=default:my-sa </span><br><span class="line">$ <span class="built_in">export</span> TOKEN=<span class="string">&#x27;kubect1 get secret s(kubect1 get secret | grep my-sa | awk &#x27;</span>(<span class="built_in">print</span> <span class="variable">$l</span>&#125;<span class="string">&#x27;) -ojsonpath=(.data.token&#125; I base64 -d</span></span><br></pre></td></tr></table></figure><h2 id="k8s开启http端口"><a href="#k8s开启http端口" class="headerlink" title="k8s开启http端口"></a>k8s开启http端口</h2><ul><li>访问apiserver的http8080端口需要开启，apiserver的pod的不安全服务端口<ul><li>vim /etc/kubernetes/manifests/kube-apiserver.yaml </li><li>修改  –insecure-port=8080</li></ul></li></ul><h2 id="定义一个pod最起码的配置"><a href="#定义一个pod最起码的配置" class="headerlink" title="定义一个pod最起码的配置"></a>定义一个pod最起码的配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span>    <span class="string">（可填</span> <span class="string">Deployment、Job、Ingress、Service）</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">namespace1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">mycustome.pod.label:</span> <span class="string">customePodLabel</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">container1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">xxxdocker镜像</span></span><br><span class="line">      <span class="attr">imagePullPolice:</span> <span class="string">IfNotPresent</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">【开启后执行的第一句脚本语言】.sh</span></span><br><span class="line">      <span class="attr">workingDir:</span> <span class="string">xxx路径[创建工作的内容会这个docker路径下]</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">挂载名称1</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">本地路径</span></span><br><span class="line">      <span class="attr">port:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">portname1</span></span><br><span class="line">        <span class="attr">hostport:</span> <span class="string">本地端口</span></span><br><span class="line">      <span class="attr">env:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envname1</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">环境变量值</span></span><br><span class="line">      <span class="attr">resource:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">250m</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">100kb</span> </span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">secretName1</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">k1</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">容器secret路径</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">CM1</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">cm1k1</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">容器configMap路径</span></span><br></pre></td></tr></table></figure><ul><li>综上得，定义一个pod需要<ol><li>apiversion/</li><li>kind/</li><li>metadata/<ol><li>podname/</li><li>namespaces/</li><li>labels/<ol><li>containername/</li><li>containerimages/ imagePullPolice/</li><li>workingdir/</li><li>volumeMounts/<ol><li>name/</li><li>mountPath/ </li></ol></li><li>port/<ol><li>name/</li><li>hostport/</li></ol></li><li>env/<ol><li>name</li><li>value</li></ol></li><li>resource/<ol><li>limits/<ol><li>cpu/</li><li>momory/</li></ol></li></ol></li><li>secret/</li></ol></li></ol></li></ol></li><li>思路定义pod—&gt;conatiner-&gt;image/port/volume/env/resource</li></ul><h2 id="定义一个deployment最起码的配置"><a href="#定义一个deployment最起码的配置" class="headerlink" title="定义一个deployment最起码的配置"></a>定义一个deployment最起码的配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">namespaces:</span> <span class="string">my-custome-namespaces</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">管理指定pod的deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="string">数量</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span>    <span class="string">//通过label选择pod</span></span><br><span class="line">      <span class="attr">mycustome.pod.label:</span> <span class="string">customePodLabel</span>   <span class="string">//label选择器</span></span><br><span class="line">  <span class="attr">template:</span>   <span class="string">//模版</span></span><br><span class="line">    <span class="attr">metadata:</span> </span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">mycustome.pod.label:</span> <span class="string">customePodLabel</span>  <span class="string">//选择该label的pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span> <span class="string">//期望创建的容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.10</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><ul><li>kubectl edit deploy/custome-deployment-nginx  修改deployment</li><li>kubectl get deployment –show-labels  展示label</li><li>kubectl rollout status deploy/custome-deployment-nginx  查看发布状态</li><li>kubectl rollout history deploy/custome-deployment-nginx  查看历史状态</li><li>kubectl rollout undo deploy/nginx-deployment –to-revision=1  回滚到指定版本</li><li>kubectl set image deploy/custome-deployment-nginx nginx=nginx:1.11 更新镜像</li><li>kubectl scale –replicas=10 deployment/custome-deployment-nginx  扩容</li></ul><h2 id="定义一个service最起码的配置"><a href="#定义一个service最起码的配置" class="headerlink" title="定义一个service最起码的配置"></a>定义一个service最起码的配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">myCustomePodLabel:</span> <span class="string">customePodLabel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">88</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">myCustomePodLabel:</span> <span class="string">customePodLabel</span></span><br></pre></td></tr></table></figure><ul><li></li><li><p>kubectl edit svc/nginx-service  修改svc配置</p></li></ul><h2 id="k8s调度器，预选策略和优选函数（https-www-cnblogs-com-klvchen-p-10024846-html）"><a href="#k8s调度器，预选策略和优选函数（https-www-cnblogs-com-klvchen-p-10024846-html）" class="headerlink" title="k8s调度器，预选策略和优选函数（https://www.cnblogs.com/klvchen/p/10024846.html）"></a>k8s调度器，预选策略和优选函数（<a href="https://www.cnblogs.com/klvchen/p/10024846.html%EF%BC%89">https://www.cnblogs.com/klvchen/p/10024846.html）</a></h2><ul><li><p>通过手动去实现</p></li><li><p>需要给指定的node搭上指定公司的label标签，说明属于哪个公司</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes k8s-master02 <span class="built_in">type</span>=company02</span><br></pre></td></tr></table></figure></li><li><p>把pod或者deployment以yaml方式输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod zeus-86784767b5-j7hqh -o=yaml</span><br></pre></td></tr></table></figure><h2 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h2></li><li><p>状态<br>  三种调度状态：Waiting（等待）、Running（运行中）和 Terminated（已终止）</p></li><li><p>探针的类型<br>  ExecAction（命令执行）、TCPSocketAction、 HTTPGetAction</p></li><li><p>两种探针<br>  存活探针、就绪探针</p></li><li><p>pause容器功能</p><ol><li>它提供整个pod的Linux命名空间的基础。</li><li>启用PID命名空间，它在每个pod中都作为PID为1进程，并回收僵尸进程</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;client-go&quot;&gt;&lt;a href=&quot;#client-go&quot; class=&quot;headerlink&quot; title=&quot;client-go&quot;&gt;&lt;/a&gt;client-go&lt;/h2&gt;&lt;p&gt; 通过client-go获取kubeconfig访问集群&lt;/p&gt;
&lt;p&gt; 参考文献：</summary>
      
    
    
    
    
  </entry>
  
</feed>
